{"ast":null,"code":"var _jsxFileName = \"/Users/E113938/Library/CloudStorage/OneDrive-RMITUniversity/My Mac Folders/2025/FILTER Project/FILTER/Map Dashboard/Map Demonstrator/src/components/map.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// --- LLM API Setup ---\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\n// --- START: NEW INTERACTIVE DESCRIPTION COMPONENT ---\n// (You can move this to its own file and import it if you prefer)\nconst InteractiveDescription = ({\n  text,\n  keywords,\n  colors,\n  onKeywordClick\n}) => {\n  _s();\n  const parts = useMemo(() => {\n    if (!text || !keywords.length) {\n      return [text];\n    }\n    const regex = new RegExp(`(${keywords.join('|')})`, 'gi');\n    return text.split(regex).filter(part => part !== '');\n  }, [text, keywords]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    style: {\n      fontSize: '0.95rem',\n      color: '#6c757d',\n      lineHeight: 1.6\n    },\n    children: parts.map((part, index) => {\n      const originalKeyword = keywords.find(kw => kw.toLowerCase() === part.toLowerCase());\n      if (originalKeyword) {\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          style: {\n            color: colors[originalKeyword] || '#000',\n            cursor: 'pointer',\n            fontWeight: 'bold',\n            textDecoration: 'underline',\n            textDecorationColor: colors[originalKeyword] || '#000'\n          },\n          onClick: () => onKeywordClick(originalKeyword),\n          children: part\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: part\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 16\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n// --- END: NEW INTERACTIVE DESCRIPTION COMPONENT ---\n\n// --- Legend Component (Unchanged) ---\n_s(InteractiveDescription, \"kB+E/0zygT+E0toaiTuITJ43hpU=\");\n_c = InteractiveDescription;\nconst Legend = ({\n  title,\n  items\n}) => {\n  // ... (legend component code is unchanged)\n};\n\n// --- Map Component ---\n_c2 = Legend;\nexport default function Map() {\n  _s2();\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const descriptionCache = useRef({});\n\n  // --- ADDED: Definitions for interactive text highlighting ---\n  const PRECINCT_NAMES = ['Arden', 'Macaulay', 'Fishermans Bend', 'Docklands', 'City North'];\n  const PRECINCT_COLORS = {\n    'Arden': '#3498db',\n    // Blue\n    'Macaulay': '#e74c3c',\n    // Red\n    'Fishermans Bend': '#2ecc71',\n    // Green\n    'Docklands': '#f39c12',\n    // Orange\n    'City North': '#9b59b6' // Purple\n  };\n\n  // State\n  const [searchText, setSearchText] = useState('');\n  const [indicators, setIndicators] = useState([]);\n  const [selectedIndicator, setSelectedIndicator] = useState(null);\n  const [showIndicators, setShowIndicators] = useState(false);\n  const [panelFocus, setPanelFocus] = useState(null);\n  const [dynamicDescription, setDynamicDescription] = useState('');\n  const [isDescriptionLoading, setIsDescriptionLoading] = useState(false);\n  // --- ADDED: State to track precinct highlighted from the text panel ---\n  const [textHoveredPrecinct, setTextHoveredPrecinct] = useState(null);\n\n  // Panel widths\n  const leftPanelWidth = 288;\n  const rightPanelWidth = 175;\n\n  // Data objects (legendData and indicatorConfig)\n  const legendData = {/* ... (no changes) ... */};\n  const indicatorConfig = {/* ... (no changes from last correct version) ... */};\n\n  // --- Main Map Initialization useEffect ---\n  useEffect(() => {\n    // ... (This entire useEffect block for map init is unchanged from the last correct version)\n    // It sets up sources, layers, and base click handlers.\n  }, []);\n\n  // ... (adjustMapBounds and resize listener useEffects are unchanged) ...\n\n  // --- Layer Visibility useEffect (Unchanged) ---\n  useEffect(() => {\n    // ... (This useEffect for toggling indicator layers is unchanged) ...\n  }, [selectedIndicator]);\n\n  // --- LLM Description useEffect (Unchanged) ---\n  useEffect(() => {\n    // ... (The main useEffect for generating descriptions via the LLM is unchanged) ...\n  }, [panelFocus]);\n\n  // --- ADDED: useEffect to visually update map when a precinct is highlighted from text ---\n  useEffect(() => {\n    if (!map.current || !map.current.isStyleLoaded()) return;\n\n    // This expression makes the highlighted precinct stand out and fades the others.\n    const fillOpacity = textHoveredPrecinct ? ['case', ['==', ['get', 'name'], textHoveredPrecinct], 0.6, 0.1] : 0.15; // Revert to default opacity if no precinct is highlighted\n\n    map.current.setPaintProperty('precincts-fill-layer', 'fill-opacity', fillOpacity);\n  }, [textHoveredPrecinct]);\n\n  // --- UI Handlers ---\n  const handleSearchClick = () => {\n    setIndicators(['Employment', 'Education', 'Income', 'Occupation']);\n    setShowIndicators(true);\n  };\n  const handleIndicatorSelect = indicator => {\n    const isCurrentlySelected = selectedIndicator === indicator;\n    const newIndicator = isCurrentlySelected ? null : indicator;\n    setSelectedIndicator(newIndicator);\n    setPanelFocus(newIndicator ? {\n      type: 'indicator',\n      name: newIndicator\n    } : null);\n    // --- ADDED: Clear text highlight when a new indicator is chosen ---\n    setTextHoveredPrecinct(null);\n  };\n\n  // --- ADDED: Handler for when a precinct name is clicked in the text ---\n  const handlePrecinctHighlight = precinctName => {\n    // Toggle the highlight: if same name is clicked, turn it off. Otherwise, set it.\n    setTextHoveredPrecinct(prev => prev === precinctName ? null : precinctName);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%',\n      height: 'calc(100vh - 78px)'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        flex: 1\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: '320px',\n        backgroundColor: '#f8f9fa',\n        padding: '1.5rem',\n        borderLeft: '1px solid #dee2e6',\n        overflowY: 'auto'\n      },\n      children: panelFocus ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          style: {\n            fontSize: '1.1rem',\n            fontWeight: 600,\n            color: '#495057',\n            marginBottom: '0.75rem'\n          },\n          children: panelFocus.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), isDescriptionLoading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '0.95rem',\n            color: '#6c757d',\n            fontStyle: 'italic'\n          },\n          children: \"\\uD83E\\uDD16 Generating AI description...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }, this) :\n        /*#__PURE__*/\n        // --- MODIFIED: Use the new InteractiveDescription component ---\n        _jsxDEV(InteractiveDescription, {\n          text: dynamicDescription,\n          keywords: PRECINCT_NAMES,\n          colors: PRECINCT_COLORS,\n          onKeywordClick: handlePrecinctHighlight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          fontSize: '0.95rem',\n          color: '#6c757d',\n          fontStyle: 'italic'\n        },\n        children: \"Select an indicator from the left panel or click on a precinct on the map to see its description.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s2(Map, \"xJpk9IAbfKydxd5IHtUqokS7yLc=\");\n_c3 = Map;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"InteractiveDescription\");\n$RefreshReg$(_c2, \"Legend\");\n$RefreshReg$(_c3, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useMemo","maplibregl","GoogleGenerativeAI","jsxDEV","_jsxDEV","genAI","process","env","REACT_APP_GEMINI_API_KEY","InteractiveDescription","text","keywords","colors","onKeywordClick","_s","parts","length","regex","RegExp","join","split","filter","part","style","fontSize","color","lineHeight","children","map","index","originalKeyword","find","kw","toLowerCase","cursor","fontWeight","textDecoration","textDecorationColor","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Fragment","_c","Legend","title","items","_c2","Map","_s2","mapContainer","descriptionCache","PRECINCT_NAMES","PRECINCT_COLORS","searchText","setSearchText","indicators","setIndicators","selectedIndicator","setSelectedIndicator","showIndicators","setShowIndicators","panelFocus","setPanelFocus","dynamicDescription","setDynamicDescription","isDescriptionLoading","setIsDescriptionLoading","textHoveredPrecinct","setTextHoveredPrecinct","leftPanelWidth","rightPanelWidth","legendData","indicatorConfig","current","isStyleLoaded","fillOpacity","setPaintProperty","handleSearchClick","handleIndicatorSelect","indicator","isCurrentlySelected","newIndicator","type","name","handlePrecinctHighlight","precinctName","prev","display","width","height","position","flex","backgroundColor","padding","borderLeft","overflowY","marginBottom","fontStyle","_c3","$RefreshReg$"],"sources":["/Users/E113938/Library/CloudStorage/OneDrive-RMITUniversity/My Mac Folders/2025/FILTER Project/FILTER/Map Dashboard/Map Demonstrator/src/components/map.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport maplibregl from 'maplibre-gl';\nimport 'maplibre-gl/dist/maplibre-gl.css';\nimport { GoogleGenerativeAI } from '@google/generative-ai';\n\n// --- LLM API Setup ---\nconst genAI = new GoogleGenerativeAI(process.env.REACT_APP_GEMINI_API_KEY);\n\n// --- START: NEW INTERACTIVE DESCRIPTION COMPONENT ---\n// (You can move this to its own file and import it if you prefer)\nconst InteractiveDescription = ({ text, keywords, colors, onKeywordClick }) => {\n  const parts = useMemo(() => {\n    if (!text || !keywords.length) {\n      return [text];\n    }\n    const regex = new RegExp(`(${keywords.join('|')})`, 'gi');\n    return text.split(regex).filter(part => part !== '');\n  }, [text, keywords]);\n\n  return (\n    <p style={{ fontSize: '0.95rem', color: '#6c757d', lineHeight: 1.6 }}>\n      {parts.map((part, index) => {\n        const originalKeyword = keywords.find(kw => kw.toLowerCase() === part.toLowerCase());\n        if (originalKeyword) {\n          return (\n            <strong\n              key={index}\n              style={{\n                color: colors[originalKeyword] || '#000',\n                cursor: 'pointer',\n                fontWeight: 'bold',\n                textDecoration: 'underline',\n                textDecorationColor: colors[originalKeyword] || '#000'\n              }}\n              onClick={() => onKeywordClick(originalKeyword)}\n            >\n              {part}\n            </strong>\n          );\n        }\n        return <React.Fragment key={index}>{part}</React.Fragment>;\n      })}\n    </p>\n  );\n};\n// --- END: NEW INTERACTIVE DESCRIPTION COMPONENT ---\n\n\n// --- Legend Component (Unchanged) ---\nconst Legend = ({ title, items }) => {\n  // ... (legend component code is unchanged)\n};\n\n\n// --- Map Component ---\nexport default function Map() {\n  const mapContainer = useRef(null);\n  const map = useRef(null);\n  const descriptionCache = useRef({});\n\n  // --- ADDED: Definitions for interactive text highlighting ---\n  const PRECINCT_NAMES = ['Arden', 'Macaulay', 'Fishermans Bend', 'Docklands', 'City North'];\n  const PRECINCT_COLORS = {\n    'Arden': '#3498db',           // Blue\n    'Macaulay': '#e74c3c',         // Red\n    'Fishermans Bend': '#2ecc71', // Green\n    'Docklands': '#f39c12',         // Orange\n    'City North': '#9b59b6'       // Purple\n  };\n\n  // State\n  const [searchText, setSearchText] = useState('');\n  const [indicators, setIndicators] = useState([]);\n  const [selectedIndicator, setSelectedIndicator] = useState(null);\n  const [showIndicators, setShowIndicators] = useState(false);\n  const [panelFocus, setPanelFocus] = useState(null);\n  const [dynamicDescription, setDynamicDescription] = useState('');\n  const [isDescriptionLoading, setIsDescriptionLoading] = useState(false);\n  // --- ADDED: State to track precinct highlighted from the text panel ---\n  const [textHoveredPrecinct, setTextHoveredPrecinct] = useState(null);\n\n  // Panel widths\n  const leftPanelWidth = 288;\n  const rightPanelWidth = 175;\n\n  // Data objects (legendData and indicatorConfig)\n  const legendData = { /* ... (no changes) ... */ };\n  const indicatorConfig = { /* ... (no changes from last correct version) ... */ };\n\n  // --- Main Map Initialization useEffect ---\n  useEffect(() => {\n    // ... (This entire useEffect block for map init is unchanged from the last correct version)\n    // It sets up sources, layers, and base click handlers.\n  }, []);\n\n  // ... (adjustMapBounds and resize listener useEffects are unchanged) ...\n\n  // --- Layer Visibility useEffect (Unchanged) ---\n  useEffect(() => {\n     // ... (This useEffect for toggling indicator layers is unchanged) ...\n  }, [selectedIndicator]);\n  \n  // --- LLM Description useEffect (Unchanged) ---\n  useEffect(() => {\n    // ... (The main useEffect for generating descriptions via the LLM is unchanged) ...\n  }, [panelFocus]);\n\n  // --- ADDED: useEffect to visually update map when a precinct is highlighted from text ---\n  useEffect(() => {\n    if (!map.current || !map.current.isStyleLoaded()) return;\n\n    // This expression makes the highlighted precinct stand out and fades the others.\n    const fillOpacity = textHoveredPrecinct\n      ? ['case', ['==', ['get', 'name'], textHoveredPrecinct], 0.6, 0.1]\n      : 0.15; // Revert to default opacity if no precinct is highlighted\n\n    map.current.setPaintProperty('precincts-fill-layer', 'fill-opacity', fillOpacity);\n  }, [textHoveredPrecinct]);\n\n\n  // --- UI Handlers ---\n  const handleSearchClick = () => {\n    setIndicators(['Employment', 'Education', 'Income', 'Occupation']);\n    setShowIndicators(true);\n  };\n\n  const handleIndicatorSelect = (indicator) => {\n    const isCurrentlySelected = selectedIndicator === indicator;\n    const newIndicator = isCurrentlySelected ? null : indicator;\n    setSelectedIndicator(newIndicator);\n    setPanelFocus(newIndicator ? { type: 'indicator', name: newIndicator } : null);\n    // --- ADDED: Clear text highlight when a new indicator is chosen ---\n    setTextHoveredPrecinct(null);\n  };\n\n  // --- ADDED: Handler for when a precinct name is clicked in the text ---\n  const handlePrecinctHighlight = (precinctName) => {\n    // Toggle the highlight: if same name is clicked, turn it off. Otherwise, set it.\n    setTextHoveredPrecinct(prev => (prev === precinctName ? null : precinctName));\n  };\n\n\n  return (\n    <div style={{ display: 'flex', width: '100%', height: 'calc(100vh - 78px)' }}>\n      {/* Map container */}\n      <div style={{ position: 'relative', flex: 1 }}>\n        {/* ... (mapContainer div and left panel UI are unchanged) ... */}\n      </div>\n\n      {/* Text Explorer Panel --- MODIFIED --- */}\n      <div style={{ width: '320px', backgroundColor: '#f8f9fa', padding: '1.5rem', borderLeft: '1px solid #dee2e6', overflowY: 'auto' }}>\n        {panelFocus ? (\n          <div>\n            <h4 style={{ fontSize: '1.1rem', fontWeight: 600, color: '#495057', marginBottom: '0.75rem' }}>{panelFocus.name}</h4>\n            {isDescriptionLoading ? (\n              <p style={{ fontSize: '0.95rem', color: '#6c757d', fontStyle: 'italic' }}>🤖 Generating AI description...</p>\n            ) : (\n              // --- MODIFIED: Use the new InteractiveDescription component ---\n              <InteractiveDescription\n                text={dynamicDescription}\n                keywords={PRECINCT_NAMES}\n                colors={PRECINCT_COLORS}\n                onKeywordClick={handlePrecinctHighlight}\n              />\n            )}\n          </div>\n        ) : (\n          <p style={{ fontSize: '0.95rem', color: '#6c757d', fontStyle: 'italic' }}>Select an indicator from the left panel or click on a precinct on the map to see its description.</p>\n        )}\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}